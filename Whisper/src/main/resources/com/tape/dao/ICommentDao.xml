<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tape.dao.ICommentDao">
    <resultMap id="BaseResultMap" type="com.tape.entity.Comment">
        <id column="comment_id" property="commentId" jdbcType="INTEGER"/>
        <result column="comment_pid" property="commentPid" jdbcType="INTEGER"/>
        <result column="comment_pname" property="commentPname" jdbcType="VARCHAR"/>
        <result column="comment_article_id" property="commentArticleId" jdbcType="INTEGER"/>
        <result column="comment_author_name" property="commentAuthorName" jdbcType="VARCHAR"/>
        <result column="comment_author_email" property="commentAuthorEmail" jdbcType="VARCHAR"/>
        <result column="comment_author_url" property="commentAuthorUrl" jdbcType="VARCHAR"/>
        <result column="comment_author_avatar" property="commentAuthorAvatar" jdbcType="VARCHAR"/>
        <result column="comment_content" property="commentContent" jdbcType="VARCHAR"/>
        <result column="comment_agent" property="commentAgent" jdbcType="VARCHAR"/>
        <result column="comment_ip" property="commentIp" jdbcType="VARCHAR"/>
        <result column="comment_create_time" property="commentCreateTime" jdbcType="TIMESTAMP"/>
        <result column="comment_role" property="commentRole" jdbcType="INTEGER"/>
        <result column="comment_user_id" property="commentUserId" jdbcType="INTEGER"/>
    </resultMap>

    <sql id="tb">comment</sql>

    <sql id="Base_Column_List">
        comment_id, comment_pid, comment_pname, comment_article_id, comment_author_name,
    comment_author_email, comment_author_url, comment_author_avatar, comment_content, comment_agent,
     comment_ip,comment_create_time, comment_role,comment_user_id
    </sql>

    <!--统计评论数-->
    <select id="countComment" parameterType="Integer" resultType="Integer">
        SELECT count(*) FROM
        <include refid="tb"/>
    </select>

<!--  通过文章id获取所有评论  -->
    <select id="listCommentByArticleId" resultType="com.tape.entity.Comment">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        <include refid="tb"/>
        WHERE
        comment_article_id = #{id}
        ORDER BY comment_id ASC
    </select>

<!--   通过id删除评论 -->
    <delete id="deleteById" parameterType="java.lang.Integer">
        delete from
        <include refid="tb"/>
        where comment_id = #{commentId,jdbcType=INTEGER}
    </delete>

<!--    保存一条评论-->
    <insert id="insert" parameterType="com.tape.entity.Comment" useGeneratedKeys="true"
            keyProperty="commentId">
        insert into
        <include refid="tb"/>
        (comment_pid, comment_pname, comment_article_id,
        comment_author_name, comment_author_email,
        comment_author_url, comment_author_avatar, comment_content, comment_agent,
        comment_ip, comment_create_time, comment_role, comment_user_id)
        values (#{commentPid,jdbcType=INTEGER}, #{commentPname,jdbcType=VARCHAR}, #{commentArticleId,jdbcType=INTEGER},
        #{commentAuthorName,jdbcType=VARCHAR}, #{commentAuthorEmail,jdbcType=VARCHAR},
        #{commentAuthorUrl,jdbcType=VARCHAR},#{commentAuthorAvatar}, #{commentContent,jdbcType=VARCHAR},
        #{commentAgent,jdbcType=VARCHAR},
        #{commentIp,jdbcType=VARCHAR}, #{commentCreateTime,jdbcType=TIMESTAMP}, #{commentRole,jdbcType=INTEGER},
        #{commentUserId,jdbcType=INTEGER})
    </insert>

    <select id="getCommentById" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    select
    <include refid="Base_Column_List"/>
    from
    <include refid="tb"/>
    where comment_id = #{commentId,jdbcType=INTEGER}
    </select>

    <!--获取评论列表-->
    <select id="listComments" resultType="com.tape.entity.Comment">
    SELECT
    <include refid="Base_Column_List"/>
    FROM
    <include refid="tb"/>
    <where>
        <if test="userId != null">
            comment_user_id = #{userId}
        </if>
    </where>
    ORDER BY comment_id DESC
    </select>


</mapper>
